Data Re/Organization:
    0. Can the incoming data structure be used to solve the problem?
        Is there a solution inherent in the structure itself already?

        e.g. repeated string problem
        https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

    1. Can you rearrange the data in to a structure more suitable for the problem?

        e.g. SockMerchant.txt
        https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

Path Problems:
    Path finding
    Counting "events/things" in a path

    2. Walk the problem space while simultaneously solving the problem
        as opposed to mapping out the whole problem space(i.e. the path) then solving the problem
        e.g. 
        JumpingOnTheClouds.txt
        https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

        CountingValleys.txt
        https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup
    
    3.  Compute the final state without walking the whole path step by step
        i.e. Avoid O(N) implementation
        If the final state factor is defined(e.g. number of rotations)

        e.g. rotate_left.scala 
        
        https://www.hackerrank.com/challenges/ctci-array-left-rotation/copy-from/75481377?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays&isFullScreen=true

    4. Given a jumbled state and an original state
    
        Q: How many operations did it take to get to jumbled state?
        A: Reverse to initial state and count operations required to rollback

        e.g. NewYearChaos.scala

    5. many decision points => 
        problem wording = generate, print all possibilities
        exhaust a search space

        tool = backtrack

    6. determining if object A is in group B (Mcdowell, 2015):
        We do NOT always need to generate the entire group B (This could be a big list)
        Can also determine if the rules that generate object A are a subset of the rules that generate group B

Unique Data Structure Members:
    objective: define generic algorithm to determine if members of a data structure are ALL unique.

    1. create empty seen_hashtable
    2. for member in collection #this traversal depends on the data structure, i.e. array, tree etc
            if member in seen_hashtable: False
            else: add member to seen_hashtable


    """
        Performance
        def:
            N = number of elements in data structure
            
            time = O(N)
            memory = O(N)
    """

References:
    Mcdowell GL. 2015. Cracking The Coding Interview. 6th ed. CareerCup.
    