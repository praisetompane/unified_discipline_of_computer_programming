
Object Creation

  1. Memory allocated
  2. Constructor called
  3. Object reference returned

Memory representation

  Instance variables are unique per object
  Methods are shared across objects (only one copy)

Memory Management

  Reference variable can dereference(unreference) an object by:
    -being assigned to another object
    -being assigned null

Data Encapsulation

  Hiding the detail of implementation (hide HOW a class does something)
    With the intention that you can change the HOW and not affect the users of the class

Referencing Instance Variables

  Reference variables holds reference/pointer to an object

Signature

  Consists of:
    - Name
    - Number of Parameters
    - Parameter datatypes
    - Order of the Parameters


    All Methods in a class must have a unique signature

The 'this' keyword

  Uses:
    - Constructor chaining
    - Access instance variable (normally for within the object)
    - Return the current object from a method (return reference)
    - Pass the current object to a method (pass reference)

    Method parameters take precedence over instance variables
    public class Employee {     public String name;     
      private int age;    ...        
      private void setAge(int age) {         age = age;     }
      }

Variable Number of Arguments
     
    One can pass a variable number of arguments with the following restrictions 
       - arguments must be of the same type
       - they will be stored as an array
       - they must be the last arguments passed to the method

Immutable objects
    Instance variables cannot be changed 
    Creating mutable objects:
         - declare the class as final
         - declare members as private and ideally final
         - Do not create mutator/setter methods
         - Do not allow mutable objects to be changed?
               public Date getDate() {         return new Date(date.getTime());     }: Returning a copy of the date variable and not the reference to the object 

Constructors

    Characteristics:
          - Same name as class
          - Can be overloaded
          - They are NOT methods
          - No return typed not even void

Constructor chaining

Java initialization sequence:

 1. Zeroing variables
 2. Initialization of final and static methods
 3.  Instance variable initialization 
 4. Initialization blacks
 5. Constructors

Methods
    public void eat() { return;  // this is valid, as long as there are no parameters}
pg 195
