Used to represent data across multiple dimenstion (x,y,z etc)

Declaration


	static int ROWS = 2
	static int COLS = 3

	int [] marks = new int [ROWS][COLS]

Initialisation
	grades[0][0] = 0;
	grades[0][1] = 1;
	grades[0][2] = 2;
	grades[1][0] = 3;
	grades[1][1] = 4;
	grades[1][2] = 5;

	ragged arrays


Chapter 4

Array name is a reference to an array.
It can be changed to reference another array

Exception raised when accessing an element outside the array bound

-java.lang. ArrayIndexOutOfBoundsException

Declaration

int [] a
int a []
int[] arr1, arr2;
int arr1[], arr2[];

MULTIDIMENSIONAL ARRAYS = Single dimensional array of references to single dimensional arrays

int ROWS, COLS
ROWS = 2;
COLS = 3;

int [][] TwoD = new int [ROWS][COLS];

int [] s1 = new int [10];
int [] s2 = new int [4];

TwoD[0][0] = new int [s1];
TwoD[1][1] = new int [s2]; 

We can have multidimensional arrays with different lengths( Each array is afterall a unique one dimensional array)

TRAVERSING ARRAYS
    for loop
    while loop
    foreach
         for(int number : ages) {    number = 5; }
         No access to the array index
         Cannot use logical expressions to control the loop(>,<,>=,<= etc)

Comparing Arrays

  - element by element
  - equality operator
  - equals method
  - deepEquals method

  - element by element: assumes the arrays are equal(values and length)
  - equality operator : returns false unless arrays referencing the same array object.

  - equals method
Tests for object equivalency not object value(s) equivalency
     Object equivalency refers to comparing if the referenced objects are the same 
     
     Object value equivalency refers to testing if the values of the referenced objects are the same

  - deepEquals method
      Array equality methods : equal, deepEquals
      equal method: compares on object identities
      deepEqual: compares  arrays of objects. Tests the values

Technique Element-by-element comparison Using the equality operator Using the array's  equals  method Comment This will compare arrays properly, if implemented correctly. This only works properly if the two reference variables reference the same object. This only works properly if the two reference variables reference the same object. Using the  Array's class  equals  method This will work for one-dimensional arrays. Using the  Array's class  deepEquals method This performs a deeper comparison using the object's  equals  method


COPYING ARRAYS

	clone method
		1D arrays : value copy applied
		Multidimensional arrays: Object reference copy(shallow copy)

	Technique Comment
	Simple element-by-element copy Tedious but can implement either a
	shallow or deep copy
	Using the System.arraycopy method Performs a shallow copy
	Using the Arrays.copyOf method Performs a deep copy of the entire array
	Using the Arrays.copyOfRange method Performs a deep copy of part of an array
	Using the clone method Performs a shallow copy


The Arrays Class

	-If the values of a list based on an array change. The underlying array changes
	-If the values of an array change. The derived list' values change

	Useful methods

		-asList
		-fill
		-toString
		-deepToString


	constant time random access?

Collections

	Iterator interface

		Methods
			next
			hasNext
			remove

	ListIter interface
		Methods
			next
			hasNext
			previous
			hasPrevious
			nextIndex
			previousIndex
			add
			remove
			set

KNOWLEDGE TEST

	1. A, B, D
	2. B
		note: Arrays start with ROW then COL i.e int [] a = new int [ROW][COL]
	3. A, C
